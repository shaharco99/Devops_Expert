properties([
    githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/shaharco99/Devops_Expert.git'),
    pipelineTriggers([githubPush()])
])

pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: docker
                    image: shaharco1804/world_of_game
                    command:
                    - cat
                    tty: true
                    volumeMounts:
                     - mountPath: /var/run/docker.sock
                       name: docker-sock
                  volumes:
                  - name: docker-sock
                    hostPath:
                      path: /var/run/docker.sock
            '''
        }
    }

    environment {
        DOCKER_HUB_REPO = "shaharco1804/score_flask"
        CONTAINER_NAME = "score_flask"
        imageVersion = "v${new Date().format('YYYYMMdd')}"
        WORKSPACE_DIR = "WorldOfGames"
    }

    stages {
        stage('Workspace Inspection') {
            steps {
                container('docker') {
                    sh '''
                        echo "=== Workspace Content ==="
                        ls -la ${WORKSPACE_DIR}
                        echo "=== Requirements File Check ==="
                        if [ -f "${WORKSPACE_DIR}/requirements" ]; then
                            echo "Requirements file exists"
                            cat ${WORKSPACE_DIR}/requirements
                        else
                            echo "ERROR: requirements file is missing!"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Clean') {
            steps {
                container('docker') {
                    sh '''
                        echo "=== Cleaning up containers ==="
                        docker rm -f ${CONTAINER_NAME} || echo "No container ${CONTAINER_NAME} to remove"
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                container('docker') {
                    sh '''
                        echo "=== Building Docker Image ==="
                        docker build -t ${DOCKER_HUB_REPO}:${imageVersion} --pull WorldOfGames/. --no-cache
                        echo "=== Image Details ==="
                        docker images | grep ${DOCKER_HUB_REPO}
                    '''
                }
            }
        }

        stage('Run') {
            steps {
                container('docker') {
                    sh '''
                        echo "=== Starting Services ==="
                        docker-compose down --remove-orphans
                        docker-compose up -d --build
                        echo "=== Service Logs ==="
                        docker-compose logs score
                    '''
                }
            }
        }

        stage('Test') {
            steps {
                container('docker') {
                    sh '''
                        echo "=== Running Tests ==="
                        echo "=== Test Environment Setup ==="
                        echo "Current directory: $(pwd)"
                        ls -la
                        echo "=== Running Tests ==="
                        docker-compose run --rm tester
                        echo "=== Test Logs ==="
                        docker-compose logs tester
                    '''
                }
            }
        }

        stage('Finalize') {
            steps {
                container('docker') {
                    withDockerRegistry([ credentialsId: "dockerhub", url: "" ]) {
                        sh '''
                            echo "=== Pushing Image to Registry ==="
                            docker push ${DOCKER_HUB_REPO}:${imageVersion}
                            echo "=== Cleanup ==="
                            docker-compose down --remove-orphans
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            container('docker') {
                sh '''
                    echo "=== Cleanup ==="
                    docker-compose down --remove-orphans
                '''
            }
        }
        failure {
            container('docker') {
                sh '''
                    echo "=== Debug Information on Failure ==="
                    echo "Docker Compose Logs:"
                    docker-compose logs
                    echo "Docker Container Status:"
                    docker ps -a
                    echo "Workspace Contents:"
                    ls -la
                '''
            }
        }
    }
}